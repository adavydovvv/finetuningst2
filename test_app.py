#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
from pathlib import Path
import numpy as np
from PIL import Image
import onnxruntime as ort

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ experiments
ROOT = Path(".").resolve()
sys.path.append(str(ROOT / "experiments"))

from datasets import ImageFolderSimple

def test_onnx_model():
    """–¢–µ—Å—Ç ONNX –º–æ–¥–µ–ª–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ONNX –º–æ–¥–µ–ª–∏")
    print("="*40)
    
    # –ü—É—Ç–∏
    onnx_path = ROOT / "models" / "efficientnet_b0.onnx"
    data_dir = ROOT / "data" / "raw" / "val"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not onnx_path.exists():
        print(f"‚ùå ONNX –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {onnx_path}")
        print("–°–Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å:")
        print("python export_onnx.py")
        return False
    
    if not data_dir.exists():
        print(f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {data_dir}")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ONNX –º–æ–¥–µ–ª—å
        print(f"üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ ONNX –º–æ–¥–µ–ª–∏...")
        session = ort.InferenceSession(str(onnx_path), providers=['CPUExecutionProvider'])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å—ã
        train_ds = ImageFolderSimple(str(ROOT / "data" / "raw" / "train"))
        class_names = list(train_ds.class_to_idx.keys())
        print(f"üè∑Ô∏è –ö–ª–∞—Å—Å—ã: {class_names}")
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
        import albumentations as A
        from albumentations.pytorch import ToTensorV2
        
        preprocess = A.Compose([
            A.Resize(224, 224),
            A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
        ])
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        correct = 0
        total = 0
        
        for class_name in class_names:
            class_dir = data_dir / class_name
            if not class_dir.exists():
                continue
                
            print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: {class_name}")
            
            for img_file in list(class_dir.glob("*.jpg"))[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.open(img_file).convert('RGB')
                
                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                img_array = np.array(img)
                img_processed = preprocess(image=img_array)['image']
                img_tensor = np.transpose(img_processed, (2, 0, 1)).astype(np.float32)[None, ...]
                
                # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
                outputs = session.run(None, {'input': img_tensor})
                logits = outputs[0][0]
                
                # Softmax
                exp = np.exp(logits - np.max(logits))
                probs = exp / exp.sum()
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç
                pred_class = class_names[np.argmax(probs)]
                pred_prob = np.max(probs)
                
                is_correct = pred_class == class_name
                correct += is_correct
                total += 1
                
                status = "‚úÖ" if is_correct else "‚ùå"
                print(f"  {status} {img_file.name}: {pred_class} ({pred_prob:.3f})")
        
        accuracy = correct / total if total > 0 else 0
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct}/{total}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}")
        
        return accuracy > 0.8
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_gradio_app():
    """–¢–µ—Å—Ç Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    print(f"\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("="*40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        sys.path.append(str(ROOT / "app"))
        from gradio_app import predict, LABELS
        
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–µ–Ω")
        print(f"üè∑Ô∏è –ö–ª–∞—Å—Å—ã: {LABELS}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_img = Image.new('RGB', (224, 224), color='red')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        results, text = predict(test_img)
        
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è predict —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {text}")
        print(f"üè∑Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {results}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print("="*50)
    
    # –¢–µ—Å—Ç ONNX –º–æ–¥–µ–ª–∏
    onnx_ok = test_onnx_model()
    
    # –¢–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_ok = test_gradio_app()
    
    print(f"\nüìã –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ONNX –º–æ–¥–µ–ª—å: {'‚úÖ' if onnx_ok else '‚ùå'}")
    print(f"   Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {'‚úÖ' if app_ok else '‚ùå'}")
    
    if onnx_ok and app_ok:
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app/gradio_app.py")
    else:
        print(f"\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()

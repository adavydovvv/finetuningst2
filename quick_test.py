#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ experiments –≤ sys.path
sys.path.append(str(Path(__file__).parent / "experiments"))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import torch
        print(f"‚úÖ PyTorch: {torch.__version__}")
    except ImportError as e:
        print(f"‚ùå PyTorch: {e}")
        return False
    
    try:
        import timm
        print(f"‚úÖ timm: {timm.__version__}")
    except ImportError as e:
        print(f"‚ùå timm: {e}")
        return False
    
    try:
        import albumentations as A
        print(f"‚úÖ albumentations: {A.__version__}")
    except ImportError as e:
        print(f"‚ùå albumentations: {e}")
        return False
    
    try:
        from sklearn.metrics import confusion_matrix
        print("‚úÖ scikit-learn")
    except ImportError as e:
        print(f"‚ùå scikit-learn: {e}")
        return False
    
    return True

def test_data_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    data_dir = Path("data/raw")
    if not data_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    train_dir = data_dir / "train"
    val_dir = data_dir / "val"
    
    if not train_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {train_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    if not val_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {val_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    train_classes = sorted([d.name for d in train_dir.iterdir() if d.is_dir()])
    val_classes = sorted([d.name for d in val_dir.iterdir() if d.is_dir()])
    
    print(f"‚úÖ –ö–ª–∞—Å—Å—ã –≤ train: {train_classes}")
    print(f"‚úÖ –ö–ª–∞—Å—Å—ã –≤ val: {val_classes}")
    
    # –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    total_train = 0
    total_val = 0
    
    for cls in train_classes:
        cls_dir = train_dir / cls
        count = len(list(cls_dir.glob("*.jpg"))) + len(list(cls_dir.glob("*.png")))
        total_train += count
        print(f"   {cls}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    for cls in val_classes:
        cls_dir = val_dir / cls
        count = len(list(cls_dir.glob("*.jpg"))) + len(list(cls_dir.glob("*.png")))
        total_val += count
    
    print(f"‚úÖ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: train={total_train}, val={total_val}")
    
    if total_train == 0 or total_val == 0:
        print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–∞—Ö")
        return False
    
    return True

def test_model_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏...")
    
    try:
        import torch
        import timm
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏
        model = timm.create_model('resnet18', pretrained=True, num_classes=3)
        print("‚úÖ ResNet18 —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        total_params = sum(p.numel() for p in model.parameters())
        print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")
        
        # –¢–µ—Å—Ç forward pass
        dummy_input = torch.randn(1, 3, 224, 224)
        with torch.no_grad():
            output = model(dummy_input)
        print(f"‚úÖ Forward pass: input {dummy_input.shape} -> output {output.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return False

def main():
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
    print("="*40)
    
    all_good = True
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    all_good &= test_imports()
    
    # –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö
    all_good &= test_data_structure()
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏
    all_good &= test_model_creation()
    
    print("\n" + "="*40)
    
    if all_good:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:")
        print("1. jupyter notebook experiments/notebooks/comprehensive_experiments.ipynb")
        print("2. python experiments/train.py --model_name resnet18 --epochs 2")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("pip install -r requirements.txt")

if __name__ == "__main__":
    main()

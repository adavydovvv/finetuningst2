#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
"""

import sys
import subprocess
import importlib
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    print(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    else:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True

def check_package(package_name, import_name=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞"""
    if import_name is None:
        import_name = package_name
    
    try:
        module = importlib.import_module(import_name)
        version = getattr(module, '__version__', 'unknown')
        print(f"‚úÖ {package_name}: {version}")
        return True
    except ImportError:
        print(f"‚ùå {package_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_cuda():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA"""
    try:
        import torch
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.get_device_name()}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")
            return True
        else:
            print("‚ö†Ô∏è  CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
            return False
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_data_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
    data_dir = Path("data/raw")
    
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ data/raw –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    train_dir = data_dir / "train"
    val_dir = data_dir / "val"
    
    if not train_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ data/raw/train –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    if not val_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ data/raw/val –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    train_classes = sorted([d.name for d in train_dir.iterdir() if d.is_dir()])
    val_classes = sorted([d.name for d in val_dir.iterdir() if d.is_dir()])
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Å—ã: {train_classes}")
    
    # –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    total_train = 0
    total_val = 0
    
    for cls in train_classes:
        train_count = len(list((train_dir / cls).glob("*.jpg"))) + len(list((train_dir / cls).glob("*.png")))
        val_count = len(list((val_dir / cls).glob("*.jpg"))) + len(list((val_dir / cls).glob("*.png")))
        total_train += train_count
        total_val += val_count
        print(f"   {cls}: train={train_count}, val={val_count}")
    
    print(f"‚úÖ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: train={total_train}, val={total_val}")
    
    if total_train == 0 or total_val == 0:
        print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–∞—Ö")
        return False
    
    return True

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")
    print("="*50)
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python:")
    all_good &= check_python_version()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–æ–≤:")
    required_packages = [
        ("torch", "torch"),
        ("torchvision", "torchvision"),
        ("timm", "timm"),
        ("numpy", "numpy"),
        ("pandas", "pandas"),
        ("matplotlib", "matplotlib"),
        ("seaborn", "seaborn"),
        ("scikit-learn", "sklearn"),
        ("albumentations", "albumentations"),
        ("PIL", "PIL"),
        ("jupyter", "jupyter"),
    ]
    
    for package, import_name in required_packages:
        all_good &= check_package(package, import_name)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA:")
    check_cuda()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    all_good &= check_data_structure()
    
    print("\n" + "="*50)
    
    if all_good:
        print("üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("python run_experiments.py --mode notebook")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º")
        print("\n–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤:")
        print("pip install -r requirements.txt")

if __name__ == "__main__":
    main()

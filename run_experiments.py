#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ fine-tuning –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
import argparse
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ fine-tuning")
    parser.add_argument("--mode", type=str, choices=["notebook", "basic", "hyperparams", "freezing"], 
                       default="notebook", help="–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--model", type=str, choices=["resnet18", "efficientnet_b0", "both"], 
                       default="both", help="–ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    parser.add_argument("--epochs", type=int, default=12, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö")
    parser.add_argument("--batch_size", type=int, default=16, help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ø–æ fine-tuning")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_dir = Path("data/raw")
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: data/raw")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:")
        print("data/raw/train/{class_name}/")
        print("data/raw/val/{class_name}/")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    train_dir = data_dir / "train"
    val_dir = data_dir / "val"
    
    if not train_dir.exists() or not val_dir.exists():
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–ø–∫–∏ train –∏–ª–∏ val")
        return
    
    train_classes = sorted([d.name for d in train_dir.iterdir() if d.is_dir()])
    val_classes = sorted([d.name for d in val_dir.iterdir() if d.is_dir()])
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Å—ã: {train_classes}")
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {val_classes}")
    
    if train_classes != val_classes:
        print("‚ö†Ô∏è  –ö–ª–∞—Å—Å—ã –≤ train –∏ val –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
    
    # –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for cls in train_classes:
        train_count = len(list((train_dir / cls).glob("*.jpg"))) + len(list((train_dir / cls).glob("*.png")))
        val_count = len(list((val_dir / cls).glob("*.jpg"))) + len(list((val_dir / cls).glob("*.png")))
        print(f"   {cls}: train={train_count}, val={val_count}")
    
    print("\n" + "="*50)
    
    if args.mode == "notebook":
        print("üìì –ó–∞–ø—É—Å–∫ Jupyter –Ω–æ—É—Ç–±—É–∫–∞ —Å –ø–æ–ª–Ω—ã–º–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏...")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
        print("jupyter notebook experiments/notebooks/comprehensive_experiments.ipynb")
        
    elif args.mode == "basic":
        print("üîß –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
        if args.model == "both":
            models = ["resnet18", "efficientnet_b0"]
        else:
            models = [args.model]
        
        for model in models:
            print(f"\n–û–±—É—á–µ–Ω–∏–µ {model}...")
            cmd = f"python experiments/train.py --model_name {model} --epochs {args.epochs} --batch_size {args.batch_size}"
            print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
            os.system(cmd)
    
    elif args.mode == "hyperparams":
        print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
        cmd = "python experiments/hyperparameter_tuning.py"
        print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
        os.system(cmd)
    
    elif args.mode == "freezing":
        print("üßä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–Ω–∏—è...")
        cmd = "python experiments/freezing_strategies.py"
        print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
        os.system(cmd)
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
